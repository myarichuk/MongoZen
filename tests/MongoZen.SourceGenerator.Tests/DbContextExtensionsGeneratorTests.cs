using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using Microsoft.CodeAnalysis.Text;

namespace MongoZen.SourceGenerator.Tests;

public class DbContextExtensionsGeneratorTests
{
    [Fact]
    public async Task GeneratesStartSessionExtensionForMultipleDbContexts()
    {
        var source = @"
using MongoZen;

public class Blog {}
public class Post {}
public class Thread {}

public class BloggingContext : DbContext
{
    public BloggingContext(DbContextOptions options) : base(options) {}
    public IDbSet<Blog> Blogs { get; set; }
    public IDbSet<Post> Posts { get; set; }
}

public class ForumContext : DbContext
{
    public ForumContext(DbContextOptions options) : base(options) {}
    public IDbSet<Thread> Threads { get; set; }
}
";
        var sessionStubs = @"
public class BloggingContextSession
{
    public BloggingContextSession(BloggingContext context) {}
}

public class ForumContextSession
{
    public ForumContextSession(ForumContext context) {}
}
";

        var expected = @"// <auto-generated/>
#nullable enable
using MongoZen;

public static class DbContextSessionExtensions
{
    public static BloggingContextSession StartSession(this BloggingContext context)
        => new BloggingContextSession(context);

    public static ForumContextSession StartSession(this ForumContext context)
        => new ForumContextSession(context);

}
";

        var test = new CSharpSourceGeneratorTest<DbContextExtensionsGenerator, XUnitVerifier>
        {
            TestState =
            {
                Sources = { source, sessionStubs },
                ReferenceAssemblies = ReferenceAssemblies.Net.Net80,
                GeneratedSources =
                {
                    (typeof(DbContextExtensionsGenerator), "DbContextSessionExtensions.g.cs",
                        SourceText.From(expected, Encoding.UTF8)),
                },
            },
        };

        test.TestState.AdditionalReferences.Add(
            MetadataReference.CreateFromFile(typeof(DbContext).Assembly.Location));

        await test.RunAsync();
    }
}