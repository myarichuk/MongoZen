using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
// ReSharper disable ComplexConditionExpression

namespace MongoFlow.SourceGenerator;

[Generator]
public sealed class DbContextExtensionsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var dbContextSymbols = context.SyntaxProvider
            .CreateSyntaxProvider(
                static (node, _) => node is ClassDeclarationSyntax { BaseList: not null },
                static (ctx, ct) =>
                {
                    var cds = (ClassDeclarationSyntax)ctx.Node;
                    if (ctx.SemanticModel.GetDeclaredSymbol(cds, ct) is not INamedTypeSymbol symbol)
                    {
                        return null;
                    }

                    var compilation = ctx.SemanticModel.Compilation;
                    return !Utils.InheritsFrom(symbol, "MongoFlow.DbContext", compilation) ? null :
                        symbol.IsAbstract ? null : symbol;
                })
            .Where(static symbol => symbol is not null)!
            .Collect();

        context.RegisterSourceOutput(dbContextSymbols, static (spc, ctxSymbols) =>
        {
            var output = GenerateSessionExtensions(ctxSymbols);
            spc.AddSource("DbContextSessionExtensions.g.cs", SourceText.From(output, Encoding.UTF8));
        });
    }

    private static string GenerateSessionExtensions(IEnumerable<INamedTypeSymbol> dbContextTypes)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using MongoFlow;");
        sb.AppendLine();
        sb.AppendLine("public static class DbContextSessionExtensions");
        sb.AppendLine("{");

        foreach (var type in dbContextTypes)
        {
            var contextName = type.Name;
            var sessionName = contextName + "Session";

            sb.Append("    public static ").Append(sessionName)
              .Append(" StartSession(this ").Append(contextName)
              .AppendLine(" context)");
            sb.AppendLine("        => new " + sessionName + "(context);");
            sb.AppendLine();
        }

        sb.AppendLine("}");

        return sb.ToString();
    }
}